{"version":3,"sources":["utils/utils.js","services/transactions/mock/index.js","components/customTable/CustomTable.component.jsx","components/spinner/Spinner.component.jsx","components/button/Button.component.jsx","pages/errorPage/ErrorPage.component.jsx","App.js","services/transactions/transactions.services.js","index.js"],"names":["hasSomeNull","element","user_id","amount","currency","timestamp","calculateCurrencyAmount","amountCurrency","total","_","finalAmount","map","tl","Number","reduce","acc","currVal","parseFloat","toFixed","Math","sign","calculateHigherTimestamp","groupedCurrency","gc","max","mocks","small","medium","large","CustomTable","usersTransaction","tHeads","className","tHead","index","usr","i","amountGBP","amountUSD","amountEUR","React","memo","Spinner","Button","content","type","setSelectTransactionType","isLoading","disabled","onClick","toLowerCase","ErrorPage","App","useState","transactions","setTransactions","setIsLoading","error","setError","typeOfTransaction","setTypeOfTransaction","selectTransactionType","setUsersTransaction","jsonObjectsTypes","useEffect","setTimeout","undefined","Promise","resolve","reject","mock","transactionsRequest","then","response","hasSomeNulls","some","jsonObject","result","trx","hasOwnProperty","isJsonPropertiesCorrect","json","jsonString","JSON","stringify","parse","isValidJsonString","msg","catch","err","levTransactionData","useCallback","jsonObj","elements","groupBy","userId","toArray","value","gp_users","users","item","timestampGBP","timestampUSD","timestampEUR","groupingElement","subItem","grpEle","forEach","grpItem","Date","toLocaleDateString","replaceAll","finalUserObject","push","levragingTransactionData","js","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e36f37ba.chunk.js","sourcesContent":["// START - Handling if JSON is valid, hasNoNulls as in values and has no Wrong properties\nexport const isJsonPropertiesCorrect = (jsonObject) => {\n  let result = true\n  jsonObject.map((trx) => {\n    if (\n      !trx.hasOwnProperty(\"user_id\") ||\n      !trx.hasOwnProperty(\"amount\") ||\n      !trx.hasOwnProperty(\"currency\") ||\n      !trx.hasOwnProperty(\"timestamp\")\n    ) {\n      result = false\n    }\n    return result\n  })\n  return result\n}\n\nexport const isValidJsonString = (json) => {\n  const jsonString = JSON.stringify(json)\n  if (!(jsonString && typeof jsonString === \"string\")) {\n    return false\n  }\n\n  try {\n    JSON.parse(jsonString)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nexport const hasSomeNull = (element) => {\n  return (\n    element.user_id === null ||\n    element.amount === null ||\n    element.currency === null ||\n    element.timestamp === null\n  )\n}\n// END - Handling if JSON is valid, hasNoNulls as in values and has no Wrong properties\n\nexport const groupByKey = (array, key) => {\n  return array.reduce((acc, currVal) => {\n    const myAttribute = currVal[key]\n    acc[myAttribute] = [...(acc[myAttribute] || []), currVal]\n    return acc\n  }, {})\n}\n\nexport const getObjectItems = (objectProvided, emptyArray) => {\n  let objKeys = Object.keys(objectProvided)\n\n  for (let item of objKeys) {\n    emptyArray?.push(objectProvided[item])\n  }\n  return emptyArray\n}\n\nexport const calculateCurrencyAmount = (amountCurrency, total, _) => {\n  amountCurrency = total.map((tl) => Number(tl?.amount))\n  let finalAmount = amountCurrency\n    .reduce((acc, currVal) => parseFloat(acc + currVal), 0)\n    .toFixed(2)\n\n  let finalAmountWithSign =\n    Math.sign(Number(finalAmount)) === 1\n      ? `+${Number(finalAmount)}`\n      : Number(finalAmount)\n\n  // Sum with loadash\n  // finalAmount = _.sum(amountCurrency).toFixed(2)\n\n  return finalAmountWithSign\n}\n\nexport const isValidTimestamp = (time) => new Date(time).getTime() > 0\n\nexport const calculateHigherTimestamp = (timestamp, groupedCurrency, _) => {\n  timestamp = groupedCurrency.map((gc) => gc?.timestamp)\n\n  timestamp = _.max(timestamp)\n\n  return timestamp\n}\n\n// Should not be here, but to make it cleaner in the main code, i have placed it here for now\n// TO CHANGE IT'S PLACE LATER\nexport const levragingTransactionData = (_, jsonObj) => {\n  const groupedByUserId = _(jsonObj)\n    .groupBy((userId) => userId?.user_id)\n    .toArray()\n    .value()\n\n  let elements = groupedByUserId.map((gp_users) => gp_users)\n  let users = []\n\n  elements.map((item) => {\n    let total = []\n    let timestamp\n    let timestampGBP\n    let timestampUSD\n    let timestampEUR\n    let amountGBP = 0,\n      amountEUR = 0,\n      amountUSD = 0\n\n    var groupingElement = item.map((subItem) => subItem)\n    var groupedByCurrency = _(groupingElement)\n      .groupBy((grpEle) => grpEle?.currency)\n      .toArray()\n      .value()\n\n    groupedByCurrency.forEach((groupedCurrency) => {\n      total = _(groupedCurrency)\n        .map((grpItem) => grpItem)\n        .value()\n\n      let currency = total[0]?.currency\n\n      if (currency === \"GBP\") {\n        amountGBP = calculateCurrencyAmount(amountGBP, total, _)\n        timestampGBP = calculateHigherTimestamp(\n          timestampGBP,\n          groupedCurrency,\n          _\n        )\n      }\n      if (currency === \"USD\") {\n        amountUSD = calculateCurrencyAmount(amountUSD, total, _)\n        timestampUSD = calculateHigherTimestamp(\n          timestampUSD,\n          groupedCurrency,\n          _\n        )\n      }\n      if (currency === \"EUR\") {\n        amountEUR = calculateCurrencyAmount(amountEUR, total, _)\n        timestampEUR = calculateHigherTimestamp(\n          timestampEUR,\n          groupedCurrency,\n          _\n        )\n      }\n    })\n\n    timestamp = _.max([timestampEUR, timestampGBP, timestampUSD])\n    timestamp = new Date(timestamp).toLocaleDateString().replaceAll(\"/\", \"-\")\n\n    let finalUserObject = {\n      user_id: item[0]?.user_id,\n      timestamp: timestamp,\n      amountEUR: amountEUR,\n      amountUSD: amountUSD,\n      amountGBP: amountGBP,\n    }\n\n    users.push(finalUserObject)\n    return users\n  })\n  return users\n}\n","import smallTransactions from \"./transactions-small.json\"\nimport mediumTransactions from \"./transactions-medium.json\"\nimport largeTransactions from \"./transactions-large.json\"\n\nexport const mocks = {\n  small: smallTransactions,\n  medium: mediumTransactions,\n  large: largeTransactions,\n}\n","import React from \"react\"\nimport \"./CustomTable.style.css\"\n\nconst CustomTable = ({ usersTransaction, tHeads }) => {\n  return (\n    <>\n      <table className=\"tableFixHead\" data-testid=\"table-test\">\n        <thead>\n          <tr>\n            {tHeads.map((tHead, index) => (\n              <th key={index}>{tHead}</th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {usersTransaction.map((usr, i) => {\n            return (\n              <tr key={i}>\n                <td>{usr.user_id}</td>\n                <td>{usr.amountGBP === 0 ? \"-\" : usr.amountGBP}</td>\n                <td>{usr.amountUSD === 0 ? \"-\" : usr.amountUSD}</td>\n                <td>{usr.amountEUR === 0 ? \"-\" : usr.amountEUR}</td>\n                <td>{usr.timestamp}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default React.memo(CustomTable)\n","import \"./Spinner.style.css\"\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner-overlay\">\n      <div className=\"spinner\" />\n    </div>\n  )\n}\n\nexport default Spinner\n","import React from \"react\"\nimport \"./Button.style.css\"\n\nconst Button = ({ content, type, setSelectTransactionType, isLoading }) => {\n  return (\n    <>\n      <button\n        disabled={isLoading}\n        type={type}\n        className=\"button\"\n        onClick={() =>\n          !isLoading && setSelectTransactionType(content.toLowerCase())\n        }>\n        {content}\n      </button>\n    </>\n  )\n}\n\nexport default React.memo(Button)\n","import React from \"react\"\nimport \"./ErrorPage.style.css\"\n\nconst ErrorPage = () => {\n  return (\n    <div className=\"error-container\">\n      <h1>Server Error!</h1>\n      <p>\n        Something bad happened. It's not your fault, do not worry my friend -\n        <strong> Be Happy!</strong>\n      </p>\n    </div>\n  )\n}\n\nexport default ErrorPage\n","import { useCallback, useEffect, useState } from \"react\"\nimport _ from \"lodash\"\nimport {\n  hasSomeNull,\n  isJsonPropertiesCorrect,\n  isValidJsonString,\n  levragingTransactionData,\n} from \"./utils/utils\"\nimport { transactionsRequest } from \"./services/transactions/transactions.services\"\nimport CustomTable from \"./components/customTable/CustomTable.component\"\nimport \"./App.css\"\nimport Spinner from \"./components/spinner/Spinner.component\"\nimport Button from \"./components/button/Button.component\"\nimport ErrorPage from \"./pages/errorPage/ErrorPage.component\"\n\nconst App = () => {\n  const [transactions, setTransactions] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [typeOfTransaction, setTypeOfTransaction] = useState()\n  const [selectTransactionType, setSelectTransactionType] = useState(\"medium\")\n  const [usersTransaction, setUsersTransaction] = useState([])\n  const [jsonObjectsTypes] = useState([\"Small\", \"Medium\", \"Large\"])\n  const [tHeads] = useState([\"User ID\", \"GBP\", \"USD\", \"EUR\", \"Last Activity\"])\n\n  // Get response from the API mock call then populate the state with that JSON file or throw error incase of any\n  useEffect(() => {\n    setIsLoading(true)\n    setTypeOfTransaction(selectTransactionType)\n    //Mimicking the Endpoint call with 1s delay\n    setTimeout(() => {\n      transactionsRequest(typeOfTransaction)\n        .then((response) => {\n          const hasSomeNulls = response.some(hasSomeNull)\n          if (\n            isJsonPropertiesCorrect(response) &&\n            isValidJsonString(response) &&\n            hasSomeNulls === false\n          ) {\n            setTransactions(response)\n          } else {\n            setError({ msg: \"Json Malformated!\" })\n            setTransactions([])\n            setIsLoading(false)\n          }\n        })\n        .catch((err) => {\n          setTransactions([])\n          setIsLoading(false)\n          setError(err)\n        })\n    }, 1000)\n  }, [selectTransactionType, transactions, typeOfTransaction])\n\n  //Won't make a huge difference in this exercice but it will save around ±.2ms based on Profiling data\n  const levTransactionData = useCallback(\n    () => levragingTransactionData(_, transactions),\n    [transactions]\n  )\n\n  // Populating the usersTransaction state after leveraging the data\n  useEffect(() => {\n    // const levTransactionData = levragingTransactionData(_, transactions)\n    setIsLoading(true)\n    try {\n      setUsersTransaction(levTransactionData)\n      setIsLoading(false)\n    } catch (error) {\n      setUsersTransaction(null)\n      setIsLoading(false)\n      setError(error)\n    }\n  }, [levTransactionData, transactions])\n\n  if (error) {\n    return <ErrorPage />\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"button-container\">\n        {jsonObjectsTypes.map((js, index) => (\n          <Button\n            key={index}\n            content={js}\n            type=\"submit\"\n            setSelectTransactionType={setSelectTransactionType}\n            isLoading={isLoading}\n          />\n        ))}\n      </div>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <CustomTable usersTransaction={usersTransaction} tHeads={tHeads} />\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import { mocks } from \"./mock\"\n\nexport const transactionsRequest = (typeOfTransaction = \"small\") => {\n  if (\n    typeOfTransaction === null ||\n    typeOfTransaction === undefined ||\n    typeof typeOfTransaction !== \"string\"\n  ) {\n    typeOfTransaction = \"small\"\n  }\n\n  return new Promise((resolve, reject) => {\n    const mock = mocks[typeOfTransaction.toLowerCase()]\n    if (!mock) {\n      reject(\"transactions not found\")\n    }\n    resolve(mock)\n  })\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}